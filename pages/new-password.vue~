<template>
  <div class="login-container" @contextmenu.prevent>
    <SlideShowBG>

      <LoginContainer :height="'50vh'" :width="'100vw'">
        <NuxtLink to="/">
          <div class="logo"></div>
        </NuxtLink>
        <p><b>A new era for design with just one click.</b></p>
        <form @submit.prevent="handleLogin">
          <div class="password-container">
            <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
            <div class="password-wrapper">
              <input
                  v-model.trim="newpassword"
                  :type="passwordFieldType"
                  class="centered-input"
                  placeholder="New Password"
                  @input="validateInput"
              />
              <button class="password-toggle" type="button" @click="togglePasswordVisibility">
                <img :src="passwordFieldType === 'password' ? seePasswordIcon : hidePasswordIcon"
                     alt="Toggle Visibility"/>
              </button>
            </div>
          </div>
          <button :disabled="!!errorMessage" class="login-button" type="submit">Submit</button>
        </form>
      </LoginContainer>
    </SlideShowBG>

  </div>
</template>

<script setup>
import {onBeforeUnmount, onMounted, ref} from 'vue';
import {useRouter} from 'vue-router';
import {useNuxtApp} from '#app';

import LoginContainer from '~/components/BoxContainer.vue';
import seePasswordIcon from '@/assets/icon/see_password.png';
import hidePasswordIcon from '@/assets/icon/hide_password.png';
import Shared_variables_ro from "~/config/shared_variables_ro.js";
import SharedVariables from "~/config/shared_variables_ro.js";
import SlideShowBG from "~/components/SlideShowBG.vue";

const newpassword = ref('');
const passwordFieldType = ref('password');
const errorMessage = ref('');
const router = useRouter();

const nuxtApp = useNuxtApp();

const analytics = nuxtApp.$firebase.analytics;
const logEvent = nuxtApp.$firebase.logEvent;

let startTime = Date.now(); // Untuk menyimpan waktu mulai
const pageName = 'new-password.vue'; // Nama halaman yang sedang dilihat

onMounted(async () => {
  try {
    SharedVariables.compareAndHandleVersion();

    // Cek apakah preRegistrationEvent bernilai true
    if (SharedVariables.preRegistrationEvent) {
      // Redirect ke pre-registration-event.vue
      await router.push('/pre-registration-event');
      return; // Hentikan eksekusi kode lebih lanjut setelah redirect
    }

    await nuxtApp.$redirectIfAdminLoggedIn();  // Panggil fungsi redirectIfLoggedIn
  } catch (error) {
    const errMessage = "Error during onMounted in new-password.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/new-password.vue",
      whatFunction: "onMounted"
    });
  }
});

onBeforeUnmount(() => {
  try {
    if (analytics && logEvent) {
      const endTime = Date.now(); // Simpan waktu saat pengguna meninggalkan halaman
      const duration = (endTime - startTime) / 1000; // Hitung durasi dalam detik

      // Log event ke Firebase Analytics dengan durasi pengguna di halaman ini
      logEvent(analytics, pageName, {
        duration: duration // Durasi dalam detik
      });
    }
  } catch (error) {
    const errMessage = "Error during onBeforeUnmount in new-password.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/new-password.vue",
      whatFunction: "onBeforeUnmount"
    });
  }
});

const validateInput = () => {
  try {
    if (!newpassword.value) {
      errorMessage.value = 'Please enter a new password.';
    } else {
      errorMessage.value = '';
    }
  } catch (error) {
    const errMessage = "Error during validateInput in new-password.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/new-password.vue",
      whatFunction: "validateInput"
    });
  }
};

const handleLogin = () => {
  errorMessage.value = '';

  if (!newpassword.value) {
    errorMessage.value = 'Please enter a new password.';
    return;
  }

  if (Shared_variables_ro.isDevelopment) {
    console.log('Resetting password to:', newpassword.value);
  }

  router.push('/login');


};

const togglePasswordVisibility = () => {
  passwordFieldType.value = passwordFieldType.value === 'password' ? 'text' : 'password';
};
</script>

<style scoped>
.login-container {
  position: relative;
  min-width: 100%;
  min-height: 100vh;
  //background-image: url('/assets/images/background_login.png');
  background-size: cover;
  background-position: center;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10; /* Pastikan z-index tinggi agar bisa diklik */

}

.login-card {
  background: rgba(255, 255, 255, 0.85);
  padding: 40px;
  border-radius: 30px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  text-align: center;
  width: 100%;
  max-width: 400px;
}

.logo {
  background-image: url('assets/images/logo.png');
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
  width: 209.04px;
  height: 40px;
  margin-left: 60px;
  margin-bottom: 10px;
}

.centered-input {
  text-align: center;
  margin-top: 20px;
  box-shadow: inset 0px 4px 4px #00000040;
}

input {
  width: 100%;
  padding: 12px;
  margin: 10px 0;
  border: 1px solid #ccc;
  border-radius: 30px;
}

.password-wrapper {
  position: relative;
}

.password-toggle {
  position: absolute;
  top: 55%;
  right: 15px;
  transform: translateY(-50%);
  background: none;
  border: none;
  cursor: pointer;
  outline: none;
}

.password-toggle img {
  width: 20px;
  height: 25px;
}

.error-message {
  color: red;
  margin-bottom: 5px;
  margin-top: 15px;
  text-align: center;
}

.login-button {
  background-color: #EA0A8C;
  color: white;
  padding: 10px 30px;
  border: none;
  border-radius: 30px;
  cursor: pointer;
  font-size: 1.1em;
  gap: 10px;
  width: 202px;
  height: 50px;
  margin-top: 10px;
}

.login-button:hover {
  background-color: #e73370;
}
</style>
