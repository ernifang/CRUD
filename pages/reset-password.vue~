<template>
  <div class="login-container" @contextmenu.prevent>
    <SlideShowBG>
      <LoginContainer :height="'50vh'" :width="'100vw'">
        <NuxtLink to="/">
          <div class="logo"></div>
        </NuxtLink>
        <p><b>A new era for design with just one click.</b></p>
        <form @submit.prevent="handleLogin">
          <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
          <input
              v-model.trim="email"
              class="centered-input"
              placeholder="Email Address"
              required
              type="email"
          />
          <NuxtLink v-if="emailValid" to="/enter-otp">
            <button class="login-button" type="submit">Reset Password</button>
          </NuxtLink>
          <button v-else class="login-button" type="button" @click="handleLogin">Reset Password</button>
        </form>
      </LoginContainer>
    </SlideShowBG>
  </div>
</template>

<script setup>
import {onBeforeUnmount, onMounted, ref, watch} from 'vue';
import LoginContainer from '~/components/BoxContainer.vue';
import {useNuxtApp} from '#app';
import SlideShowBG from "~/components/SlideShowBG.vue";
import SharedVariables from "~/config/shared_variables_ro.js";

const nuxtApp = useNuxtApp();

const email = ref(''); // Properti yang digunakan untuk mengikat nilai input email
const errorMessage = ref(''); // Properti untuk menyimpan pesan error
const emailValid = ref(false); // Properti untuk mengecek validitas email

const analytics = nuxtApp.$firebase.analytics;
const logEvent = nuxtApp.$firebase.logEvent;

let startTime = Date.now(); // Untuk menyimpan waktu mulai
const pageName = 'reset-password.vue'; // Nama halaman yang sedang dilihat

onMounted(async () => {
  try {
    SharedVariables.compareAndHandleVersion();

    // Cek apakah preRegistrationEvent bernilai true
    if (SharedVariables.preRegistrationEvent) {
      // Redirect ke pre-registration-event.vue
      await router.push('/pre-registration-event');
      return; // Hentikan eksekusi kode lebih lanjut setelah redirect
    }

    await nuxtApp.$redirectIfAdminLoggedIn();  // Panggil fungsi redirectIfLoggedIn
  } catch (error) {
    const errMessage = "Error during onMounted in reset-password.vue: " + error;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/reset-password.vue",
      whatFunction: "onMounted",
    });
  }
});

onBeforeUnmount(() => {
  try {
    if (analytics && logEvent) {
      const endTime = Date.now(); // Simpan waktu saat pengguna meninggalkan halaman
      const duration = (endTime - startTime) / 1000; // Hitung durasi dalam detik

      // Log event ke Firebase Analytics dengan durasi pengguna di halaman ini
      logEvent(analytics, pageName, {
        duration: duration // Durasi dalam detik
      });
    }
  } catch (error) {
    const errMessage = "Error during onBeforeUnmount in reset-password.vue: " + error;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/reset-password.vue",
      whatFunction: "onBeforeUnmount",
    });
  }
});

const validateEmail = (email) => {
  try {
    // RegEx sederhana untuk validasi email
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  } catch (error) {
    const errMessage = "Error during email validation in reset-password.vue: " + error;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/reset-password.vue",
      whatFunction: "validateEmail",
    });
    return false; // Return false in case of error
  }
};

watch(email, (value) => {
  try {
    // Cek apakah email valid
    emailValid.value = validateEmail(value);
    errorMessage.value = emailValid.value ? '' : 'Please enter a valid email address';
  } catch (error) {
    const errMessage = "Error during email validation watch in reset-password.vue: " + error;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/reset-password.vue",
      whatFunction: "watch email",
    });
  }
});

const handleLogin = () => {
  if (emailValid.value) {
    if (SharedVariables.isDevelopment) console.log('Resetting password for:', email.value);
    errorMessage.value = ''; // Mengosongkan pesan error jika email valid
  } else {
    errorMessage.value = 'Please enter a valid email address.';
  }
};
</script>

<style scoped>
.login-container {
  position: relative;
  min-width: 100%;
  min-height: 100vh;
  //background-image: url('/assets/images/background_login.png');
  background-size: cover;
  background-position: center;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10; /* Pastikan z-index tinggi agar bisa diklik */

}

.error-message {
  color: red;
  margin-bottom: 5px;
  margin-top: 15px;
  text-align: center;
}

.login-card {
  background: rgba(255, 255, 255, 0.85);
  padding: 40px;
  border-radius: 30px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  text-align: center;
  width: 100%;
  max-width: 400px;
}

.logo {
  background-image: url('../assets/images/logo.png');
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
  width: 209.04px;
  height: 40px;
  margin-left: 60px;
  margin-bottom: 10px;
}

.centered-input {
  text-align: center;
  margin-top: 20px;
  box-shadow: inset 0px 4px 4px #00000040;
}

input {
  width: 100%;
  padding: 12px;
  margin: 10px 0;
  border: 1px solid #ccc;
  border-radius: 30px;
}

.forgot-password {
  margin: 15px 0px;
  color: #29ABE1;
  text-align: right;
}

.login-button {
  background-color: #EA0A8C;
  color: white;
  padding: 10px 30px;
  border: none;
  border-radius: 30px;
  cursor: pointer;
  font-size: 1.1em;
  gap: 10px;
  width: 202px;
  height: 50px;
  margin-top: 10px;
}

.login-button:hover {
  background-color: #e73370;
}

/* Tambahan gaya lainnya seperti untuk tombol sosial media */
</style>
