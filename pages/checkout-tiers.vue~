<template>
  <div @contextmenu.prevent>
    <Navbar :isAdmin="false" :isLoggedIn="isUserLoggedIn"/>
    <div class="body-section">
      <div :class="{ 'disabled': isLoading }" class="payment-container">
        <button class="back-button" @click="goToPrevPage">‚Üê Back</button>
        <h1 class="title">PAYMENT DETAILS</h1>
        <div class="checkout-container">
          <Payment
              :artworkId="decryptedArtworkId"
              :documentId="documentId"
              :isPayPalDisabled="isPayPalDisabled"
              :planFeatures="planFeatures"
              :planImage="decryptedArtworkImage"
              :planName="decryptedDescription"
              :planPrice="planPrice"
              :planTitle="planTitle"
              :planToken="planToken"
              :sourcePage="sourcePage"
              :total="total"
              @PayProgress="handlePayProgress"
              @onPayPalPaymentSuccess="handlePayPalPaymentSuccess"
              @onPaymentError="handlePaymentError"
              @onPaymentSuccess="handlePaymentSuccess"
          />

          <!-- Order Summary -->
          <div v-if="sourcePage =='payment-token' || sourcePage =='community-detail'" class="order-summary">
            <div class="summary-header">
              <img :src="decryptedArtworkImage" alt="Plan Image" class="plan-image"/>
              <div class="summary-form">
                <h3 class="summary-title"><b>{{ planTitle }}</b></h3>
                <p class="plan-type">{{ decryptedDescription }}</p>
                <p v-if="sourcePage =='payment-token'" class="billed-monthly">Billed Monthly</p>
              </div>
            </div>
            <p class="price">$ {{ planPrice }}.00</p>

            <!-- Blanx Coin Redemption -->
            <div v-if="userCoinBalance !== 0" class="coin-toggle" @click="applyCoinRedemption">
              <label for="use-coins-toggle">
                Redeem your {{ useCoins ? coinsUsed : Math.min(userCoinBalance, total) }} Coins
              </label>
              <span :class="{ 'slider-active': useCoins }" class="slider"></span>
            </div>


            <!-- Discount Code -->
            <div class="discount-section">
              <input v-model="discountCode" class="discount-input" placeholder="Discount Code" type="text"/>
              <button class="apply-button" @click="applyDiscount">Apply</button>
            </div>

            <p v-if="discountMessage" class="error-message">{{ discountMessage }}</p>
            <!-- Tampilkan nominal potongan koin jika slider diaktifkan -->
            <!--          <div v-if="useCoins && coinsUsed > 0" class="coin-discount">
                        <span>Potongan dari koin yang digunakan: </span>
                        <span>- $ {{ ((Math.min(coinsUsed, userCoinBalance * 0.5)) / 100).toFixed(2) }}</span>
                      </div>-->
            <!-- Summary Details -->
            <div class="summary-details">
              <p class="summary-item">
                <span>Subtotal:</span>
                <span>$ {{ planPrice }}.00</span>
              </p>
              <!--            <div v-if="useCoins && coinsUsed > 0" class="coin-discount">-->
              <p v-if="useCoins && coinsUsed > 0" class="summary-item">
                <span>Blanx coin has been used </span>
                <!--
                                <span>- $ {{ isSubmitting ? ((coinsUsed / 100).toFixed(2)) : ((Math.min(coinsUsed, userCoinBalance)).toFixed(2)) }}</span>
                -->
                <span>- $ {{ useCoins ? coinsUsed : Math.min(userCoinBalance, total) }}.00</span>

                <!--            </div>-->
              </p>

              <p v-if="discountCode" class="summary-item total">
                <span>Discount:</span>
                <span>- $ {{ discountcode }}.00</span> <!-- Pastikan nilai diskon ditampilkan dengan-->
              </p>
              <p class="summary-item total">
                <span>Total:</span>
                <span>$ {{ total }}.00</span>
              </p>
            </div>

          </div>
          <MacMessage
              v-if="errorVisible"
              :autoMessageChoice="macErrorMessageAutoMessageChoice"
              :message="errorMessage"
              :requiredActionButton="macErrorMessageRequiredActionButton"
              :show="showMacErrorMessage"
              :status="errorStatus"
              :title="errorTitle"
              class="error-popup"
              @close="closeErrorMessage"

          />
          <div v-if="errorVisible" class="overlay"></div>

          <LoadingOverlay :isVisible="isSaving" loadingText="Transaction Loading, Please Wait..."/>
          <LoadingOverlay :isVisible="isLoading" loadingText="Loading Data, Please Wait..."/>


        </div>
      </div>
    </div>

    <Footer/>
  </div>
</template>

<script setup>
import {useRoute} from 'vue-router';
import Payment from '@/components/payment.vue';
import Navbar from '~/components/Navbar.vue';
import Footer from '~/components/Footer.vue';
import {computed, onBeforeUnmount, onMounted, ref} from 'vue';
import Shared_variables_ro from "~/config/shared_variables_ro.js";
import SharedVariables from "~/config/shared_variables_ro.js";
// import MessageError from '@/assets/icon/error.png';
import LoadingOverlay from "~/components/LoadingOverlay.vue";
import nacl from 'tweetnacl';
import naclUtil from 'tweetnacl-util';
import axios from 'axios';
// import {loadStripe} from "@stripe/stripe-js";


const errorVisible = ref(false);
const errorMessage = ref('');
const errorTitle = ref('');
const errorStatus = ref('');
const macErrorMessageRequiredActionButton = ref(false);
const showMacErrorMessage = ref(false);
const macErrorMessageStatus = ref('');
const macErrorMessageTitle = ref('');
const macErrorMessageMessage = ref('');
const macErrorMessageAutoMessageChoice = ref('');

const useCoins = ref(false); // Status apakah pengguna ingin menukar koin atau tidak
const userCoinBalance = ref(0); // Jumlah koin yang dimiliki pengguna
const coinsUsed = ref(0); // Jumlah koin yang digunakan untuk potongan harga
const maxCoinDeduction = computed(() => Math.floor(userCoinBalance.value / 2)); // 50% of the available coins
const isCoinApplied = ref(false); // To track if the coin balance switch is on
const isPayPalDisabled = ref(false); // New ref to track if PayPal should be disabled
const isSubmitting = ref(false); // Tambahkan di bagian atas script setup

const {$firebase} = useNuxtApp();
const router = useRouter();
// const imageMessageError = ref(MessageError); // Use MessageError instead of messageerror

const nuxtApp = useNuxtApp();
// const isLoading = ref(false);
const {$getFormattedTimestamp} = useNuxtApp();
const {$redirectIfAdminLoggedIn} = useNuxtApp();

const route = useRoute();
const planName = route.query.name || 'Plan';
const planTitle = route.query.title || 'Title';

const planPrice = route.query.price || 0;
const currentTotal = ref(planPrice); // ref untuk total harga saat ini

const planFeatures = route.query.features ? route.query.features.split(',') : [];
// const planImage = route.query.image || 'image';
const planToken = route.query.goldTokens || '0';
const sourcePage = route.query.sourcePage || 'sourcePage';
const artworkId = route.query.artworkId || 'defaultArtworkId';
// const artworkIdInt = parseInt(artworkId, 10);
// const artworkIdValue = route.query.artworkId; // Ensure the value is a number
const isLoading = ref(false);
const isSaving = ref(false);

const discountCode = ref('');
const discountMessage = ref('');
let discountcode;
const discounts = ref([]);
const selectedPaymentMethod = ref('credit_card');

let userUID;
let UID;

const isUserLoggedIn = ref(false);

const encryptedArtworkId = ref('');
const encryptedArtworkImage = ref('');
const encryptedDescription = ref('');
const decryptedArtworkId = ref('');
const decryptedArtworkImage = ref('');
const decryptedDescription = ref('');
const selectedUseCoins = ref(false);

const analytics = nuxtApp.$firebase.analytics;
const logEvent = nuxtApp.$firebase.logEvent;

let startTime = Date.now(); // Untuk menyimpan waktu mulai
const pageName = 'checkout-tiers.vue'; // Nama halaman yang sedang dilihat

function goToPrevPage() {
  window.history.back(); // This will navigate back to the previous page
}


const handlePayProgress = (payload) => {
  // Periksa status yang diterima dari payload
  isSaving.value = payload.status;

  if (Shared_variables_ro.isDevelopment) {
    console.log("message: " + payload.message); // Tampilkan pesan loading
    console.log("status: " + payload.status);   // Tampilkan status loading
  }
};


// Fungsi untuk mengambil coin balance dari database
const fetchUserCoinBalance = async () => {
  try {
    handlePayProgress({message: 'Loading coin balance...'}); // Panggil handlePayProgress saat loading dimulai

    UID = localStorage.getItem('uid');

    const userDocRef = $firebase.doc($firebase.db, 'user', UID); // sesuaikan dengan referensi yang benar
    const userSnapshot = await $firebase.getDoc(userDocRef);
    if (userSnapshot.exists()) {
      userCoinBalance.value = userSnapshot.data().coin_balance || 0;
    }
  } catch (error) {
    const errMessage = "Error fetching coin balance: " + error.message;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "fetchUserCoinBalance"
    });
  }
};

// Fungsi untuk mengaktifkan penggunaan koin
function applyCoinRedemption() {
  try {
    useCoins.value = !useCoins.value; // Toggle penggunaan koin

    if (useCoins.value) {
      selectedUseCoins.value = true;

      // Hitung jumlah koin yang akan digunakan
      coinsUsed.value = useCoins.value ? Math.min(userCoinBalance.value, total.value) : 0;

      eligible(); // Call the eligible function here

    } else {
      selectedUseCoins.value = false;

      coinsUsed.value = 0; // Reset koin yang digunakan
    }

  } catch (error) {
    const errMessage = "Error applying coin redemption: " + error.message;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "applyCoinRedemption"
    });
  }
}

const fetchDiscounts = async () => {
  try {
    const discountsCollection = $firebase.collection($firebase.db, 'discount');
    const snapshot = await $firebase.getDocs(discountsCollection);

    discounts.value = snapshot.docs.map(doc => doc.data());
    if (Shared_variables_ro.isDevelopment) {
      console.log("Discounts fetched:", discounts.value);
    }
  } catch (error) {
    const errMessage = "Error fetching discounts: " + error.message;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "fetchDiscounts"
    });
  }
};

const fetchEncryptionTokenAndDecrypt = async () => {
  try {
    const requestData = {
      isUserLoggedIn: true, // Sesuaikan dengan kondisi Anda
      guestUID: '', // Sesuaikan dengan kondisi Anda
    };

    // Mengambil decryption key dari server
    const response = await axios.post('https://us-central1-blanx-project.cloudfunctions.net/getCustomEncryptionToken', requestData);

    if (response.data.success) {
      const decryptionKeyHex = response.data.key;
      const decryptionKey = hexToUint8Array(decryptionKeyHex);

      // Mengambil data terenkripsi dari localStorage
      const storedEncryptedArtworkId = localStorage.getItem('encryptedArtworkId');
      const storedEncryptedArtworkImage = localStorage.getItem('encryptedArtworkImage');
      const storedEncryptedDescription = localStorage.getItem('encryptedDescription');
      const storedNonce = localStorage.getItem('nonce');

      // Mendekripsi data
      decryptedArtworkId.value = decryptData(storedEncryptedArtworkId, storedNonce, decryptionKey);
      decryptedArtworkImage.value = decryptData(storedEncryptedArtworkImage, storedNonce, decryptionKey);
      decryptedDescription.value = decryptData(storedEncryptedDescription, storedNonce, decryptionKey);

      if (Shared_variables_ro.isDevelopment) {
        console.log("Decryption successful. Decrypted data:", decryptedArtworkId.value, decryptedArtworkImage.value, decryptedDescription.value);
      }
    } else {
      const errMessage = 'Failed to get decryption token: ' + response.data.message;
      console.error(errMessage);

      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: response.data.message,
        errorStackReportBySystem: '',
        whatPlatform: "Client",
        whatPage: "pages/checkout-tiers.vue",
        whatFunction: "fetchEncryptionTokenAndDecrypt"
      });
    }
  } catch (error) {
    const errMessage = 'Error fetching decryption token: ' + error.message;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "fetchEncryptionTokenAndDecrypt"
    });
  }
};


// Kurangi jumlah koin setelah pembayaran berhasil
async function deductCoinsAfterPayment() {
  const userUID = localStorage.getItem('user_uid');

  if (userUID && coinsUsed.value > 0) {
    try {
      const userRef = $firebase.doc($firebase.db, 'user', userUID);
      await $firebase.updateDoc(userRef, {
        coin_balance: userCoinBalance.value - coinsUsed.value
      });

      if (SharedVariables.isDevelopment) {
        console.log(`Successfully deducted ${coinsUsed.value} coins from user ${userUID}`);
      }
    } catch (error) {
      const errMessage = `Error deducting coins for user ${userUID}: ` + error.message;
      console.error(errMessage);

      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: error.message,
        errorStackReportBySystem: error.stack,
        whatPlatform: "Client",
        whatPage: "pages/checkout-tiers.vue",
        whatFunction: "deductCoinsAfterPayment"
      });
    }
  } else {
    if (SharedVariables.isDevelopment) {
      console.log("No coins to deduct or userUID is missing.");
    }
  }
}

const isTransactionCompleted = ref(false);

// Fungsi perhitungan total async
const fetchTotal = async () => {
  let totalPrice = Number(planPrice) || 0; // Mulai dengan harga rencana

  // Cek apakah ada kode diskon yang dimasukkan
  if (discountCode.value && discountCode.value !== '') { // Pastikan ada kode diskon yang valid
    try {
      const discountCollectionRef = $firebase.collection($firebase.db, 'discount');
      const discountQuery = $firebase.query(
          discountCollectionRef,
          $firebase.where('code', '==', discountCode.value) // Mencari diskon berdasarkan 'code'
      );
      const discountSnapshot = await $firebase.getDocs(discountQuery);

      // Cek apakah dokumen diskon ditemukan
      if (!discountSnapshot.empty) {
        const discountDoc = discountSnapshot.docs[0]; // Ambil dokumen pertama yang cocok
        const discountData = discountDoc.data(); // Ambil data dari dokumen

        const now = new Date().toISOString().split('T')[0];
        // Cek apakah `used_count` sudah mencapai `usage_limit`
        if (discountData.used_count >= discountData.usage_limit) {
          discountMessage.value = 'The discount code usage limit has been reached.';
          discountcode = 0; // Setel nilai diskon ke 0 jika batas penggunaan sudah tercapai
          return;
        }

        let redeemedUsers = discountData.redeemed_user || [];
        const userRedeemCount = redeemedUsers.filter(user => user === userUID).length;

        if (discountData.user_restrictions_limit_for_redeem > 0 && userRedeemCount >= discountData.user_restrictions_limit_for_redeem) {
          discountMessage.value = 'You have already used this discount code.';
          discountcode = 0; // Setel nilai diskon ke 0 jika pengguna sudah menebus diskon sesuai batas
          return;
        }

        // Validasi diskon dan cek apakah masih berlaku
        if (discountData.user_restrictions_limit_for_redeem !== 1 && discountData.is_active && discountData.expiration_date >= now) {
          if (discountData.discount_type === 'price') {
            const discountValue = Number(discountData.value) || 0;
            totalPrice -= discountValue; // Kurangi total dengan nilai diskon
          } else if (discountData.discount_type === 'percentage') {
            const discountPercentage = parseFloat(discountData.value);
            const discountAmount = (totalPrice * discountPercentage) / 100; // Hitung diskon yang benar
            totalPrice -= discountAmount; // Kurangi total dengan diskon persentase yang benar
            discountcode = discountAmount; // Simpan diskon yang diterapkan
          }

          discountMessage.value = ''; // Kosongkan pesan kesalahan jika diskon valid
        } else {
          discountcode = 0; // Atur nilai discountcode ke 0 jika tidak valid
          discountMessage.value = 'The code you entered has expired or is invalid.';
        }
      } else {
        discountMessage.value = 'Discount code not found.';
        discountcode = 0; // Atur nilai discountcode ke 0 jika tidak valid
      }
    } catch (error) {
      const errMessage = `Error fetching discount: ${error.message}`;
      console.error(errMessage);
      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: error.message,
        errorStackReportBySystem: error.stack,
        whatPlatform: "Client",
        whatPage: "pages/checkout-tiers.vue",
        whatFunction: "fetchTotal"
      });
    }
  }

  // Penerapan potongan dari penggunaan koin
  if (useCoins.value && userCoinBalance.value > 0) {
    coinsUsed.value = Math.min(totalPrice, Number(userCoinBalance.value) || 0);
    totalPrice -= coinsUsed.value; // Kurangi total dengan koin yang digunakan
  }

  currentTotal.value = totalPrice > 0 ? totalPrice : 0; // Pastikan currentTotal tidak negatif
};

const total = computed(() => currentTotal.value);


watch([useCoins, total], () => {
  try {
    if (useCoins.value) {
      coinsUsed.value = Math.min(userCoinBalance.value, total.value);
    } else {
      coinsUsed.value = 0;
    }

    isPayPalDisabled.value = useCoins.value && total.value === 0;
    if (isPayPalDisabled.value) {
      selectedPaymentMethod.value = 'credit_card';
    }

    if (Shared_variables_ro.isDevelopment) {
      console.log("Coins redemption applied, disabling PayPal:", isPayPalDisabled.value);
    }

    fetchTotal();
  } catch (error) {
    const errMessage = `Error during coin redemption or total fetch: ${error.message}`;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "watch - coin redemption and total"
    });
  }
});


// Fungsi untuk memperbarui coin balance pengguna setelah checkout berhasil
const updateUserCoinBalance = async (coinsUsed) => {
  try {
    const userDocRef = $firebase.doc($firebase.db, 'user', userUID); // Sesuaikan dengan referensi yang benar
    await $firebase.updateDoc(userDocRef, {
      coin_balance: userCoinBalance.value - coinsUsed,
    });
    userCoinBalance.value -= coinsUsed;
  } catch (error) {
    const errMessage = `Gagal memperbarui coin balance: ${error.message}`;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "updateUserCoinBalance"
    });
  }
};


const applyDiscount = async () => {
  // Reset pesan diskon
  discountMessage.value = ''; // Kosongkan pesan error terlebih dahulu
  const originalTotal = currentTotal.value;

  // Cek apakah ada kode diskon yang valid
  const discount = discounts.value.find((d) => d.code === discountCode.value);

  if (discount && discount.is_active) {
    try {
      // Ambil referensi dokumen diskon saat ini
      const discountCollectionRef = $firebase.collection($firebase.db, 'discount');
      const discountQuery = $firebase.query(
          discountCollectionRef,
          $firebase.where('code', '==', discountCode.value) // Mencari diskon berdasarkan 'code'
      );
      const discountSnapshot = await $firebase.getDocs(discountQuery);

      if (!discountSnapshot.empty) {
        // Ambil data diskon dari snapshot
        const discountDoc = discountSnapshot.docs[0];
        const discountData = discountDoc.data();

        // Kondisi tambahan untuk memeriksa validasi item diskon
        const isDiscountValid =
            (sourcePage === 'payment-token' && discountData.discount_item === 'token') ||
            (sourcePage === 'community-detail' && discountData.discount_item === 'community');

        if (!isDiscountValid) {
          discountMessage.value = 'The discount code is not valid for this item.';
          discountcode = 0; // Atur nilai discountcode ke 0 jika tidak valid
          currentTotal.value = planPrice - discountcode;
          return;
        }

        // Cek apakah `used_count` sudah mencapai `usage_limit`
        if (discountData.used_count >= discountData.usage_limit) {
          discountMessage.value = 'The discount code usage limit has been reached.';
          discountcode = 0;
          currentTotal.value = planPrice - discountcode;
          return;
        }

        // Cek apakah user_restrictions_limit_for_redeem bernilai 0, yang artinya bisa dipakai unlimited
        let redeemedUsers = discountData.redeemed_user || [];
        const userRedeemCount = redeemedUsers.filter(user => user === userUID).length;

        if (discountData.user_restrictions_limit_for_redeem > 0 && userRedeemCount >= discountData.user_restrictions_limit_for_redeem) {
          discountMessage.value = 'You have already used this discount code.';
          discountcode = 0;
          currentTotal.value = planPrice - discountcode;
          return;
        }

        // Cek apakah diskon masih aktif
        if (discountData.is_active) {
          // Terapkan diskon berdasarkan jenisnya (price atau percentage)
          if (discountData.discount_type === 'price') {
            discountcode = Number(discountData.value) || 0;
            currentTotal.value -= discountcode;
          } else if (discountData.discount_type === 'percentage') {
            const discountPercentage = parseFloat(discountData.value);
            const discountAmount = (planPrice * discountPercentage) / 100;
            currentTotal.value -= discountAmount;
            discountcode = discountAmount;
          }

          discountMessage.value = ''; // Kosongkan pesan kesalahan jika diskon valid
        } else {
          discountMessage.value = 'The code you entered has expired.';
          discountcode = 0;
          currentTotal.value = planPrice - discountcode;
        }
      } else {
        discountMessage.value = 'Discount code not found.';
        discountcode = 0;
        currentTotal.value = planPrice - discountcode;
      }
    } catch (error) {
      const errMessage = "Error applying discount: " + error;
      console.error(errMessage);

      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: error.message,
        errorStackReportBySystem: error.stack,
        whatPlatform: "Client",
        whatPage: "pages/checkout-tiers.vue",
        whatFunction: "applyDiscount"
      });

      currentTotal.value = planPrice - discountcode;
    }
  } else {
    discountMessage.value = 'Discount code is invalid or expired.';
    discountcode = 0;
    currentTotal.value = planPrice - discountcode;
  }
};


// Fungsi untuk memperbarui data diskon berdasarkan kode diskon
async function updateDiscountData(userUID, discountCode) {
  try {
    // Ambil referensi dokumen diskon di Firestore berdasarkan kode diskon
    const discountCollectionRef = $firebase.collection($firebase.db, 'discount');
    const discountQuery = $firebase.query(
        discountCollectionRef,
        $firebase.where('code', '==', discountCode) // Mencari diskon berdasarkan 'code'
    );

    const discountSnapshot = await $firebase.getDocs(discountQuery);

    // Cek apakah dokumen diskon ditemukan
    if (!discountSnapshot.empty) {
      const discountDoc = discountSnapshot.docs[0]; // Ambil dokumen pertama yang cocok
      const discountData = discountDoc.data(); // Ambil data dari dokumen
      const discountDocRef = discountDoc.ref; // Ambil referensi dokumen

      const now = new Date().toISOString().split('T')[0];

      // Cek apakah `used_count` sudah mencapai `usage_limit`
      if (discountData.used_count >= discountData.usage_limit) {
        discountMessage.value = 'The discount code usage limit has been reached.';
        discountcode = 0; // Setel nilai diskon ke 0 jika batas penggunaan sudah tercapai
        return;
      }

      // Cek apakah user_restrictions_limit_for_redeem bernilai 0, yang artinya bisa dipakai unlimited
      let redeemedUsers = discountData.redeemed_user || [];
      const userRedeemCount = redeemedUsers.filter(user => user === userUID).length;

      if (discountData.user_restrictions_limit_for_redeem > 0 && userRedeemCount >= discountData.user_restrictions_limit_for_redeem) {
        discountMessage.value = 'You have already used this discount code.';
        discountcode = 0; // Setel nilai diskon ke 0 jika pengguna sudah menebus diskon sesuai batas
        return;
      }

      // Validasi diskon dan cek apakah masih berlaku
      if (discountData.user_restrictions_limit_for_redeem !== 1 && discountData.is_active && discountData.expiration_date >= now) {

        // Tambahkan userUID ke array 'redeemed_user'
        if (discountData.user_restrictions_limit_for_redeem !== 1) {
          redeemedUsers.push(userUID);
        }

        // Tambahkan nilai 'used_count'
        const newUsedCount = (discountData.used_count || 0) + 1;

        // Update dokumen diskon di Firestore
        await $firebase.updateDoc(discountDocRef, {
          redeemed_user: redeemedUsers,
          used_count: newUsedCount
        });

        discountMessage.value = ''; // Kosongkan pesan kesalahan jika diskon valid

        if (Shared_variables_ro.isDevelopment) {
          console.log("Diskon berhasil diterapkan, Firestore diperbarui.");
        }
      } else {
        discountMessage.value = 'The code you entered has expired or is invalid.';
      }
    } else {
      discountMessage.value = "Discount code not found.";
    }
  } catch (error) {
    const errMessage = "Error updating discount document: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "updateDiscountData"
    });
  }
}

const handlePaymentError = async ({show, message, title, status, action, autoMessageChoice}) => {
  try {
    showMacErrorMessage.value = show;

    errorMessage.value = message;
    errorTitle.value = title;
    errorVisible.value = true;
    errorStatus.value = status;
    macErrorMessageRequiredActionButton.value = action;
    macErrorMessageAutoMessageChoice.value = autoMessageChoice;

    if (SharedVariables.isDevelopment) {
      console.log("Payment Error handled: ", message);
    }
  } catch (error) {
    const errMessage = "Error handling payment error: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "handlePaymentError"
    });
  }
};


const closeErrorMessage = () => {
  try {
    errorVisible.value = false;

    if (SharedVariables.isDevelopment) {
      console.log("Error message closed successfully");
    }
  } catch (error) {
    const errMessage = "Error closing error message: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "closeErrorMessage"
    });
  }
};
// const artworkId = route.query.artworkId || 'defaultArtworkId'; // Fallback jika tidak ada documentId
let documentId = ""; // Fallback jika tidak ada documentId

const props = defineProps({
  documentId: String
});

// Function to convert hex string to Uint8Array
function hexToUint8Array(hexString) {
  try {
    const bytes = new Uint8Array(Math.ceil(hexString.length / 2));
    for (let i = 0; i < bytes.length; i++) {
      bytes[i] = parseInt(hexString.substr(i * 2, 2), 16);
    }
    return bytes;
  } catch (error) {
    const errMessage = "Error converting hex to Uint8Array: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "hexToUint8Array"
    });

    return null; // Return null in case of an error
  }
}

function base64ToUint8Array(base64String) {
  try {
    return naclUtil.decodeBase64(base64String);
  } catch (error) {
    const errMessage = "Error converting base64 to Uint8Array: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "base64ToUint8Array"
    });

    return null; // Return null in case of an error
  }
}

// Function to decrypt data

function decryptData(encryptedData, nonce, key) {
  try {
    const decodedNonce = naclUtil.decodeBase64(nonce);
    const encryptedUint8Array = naclUtil.decodeBase64(encryptedData);
    const decrypted = nacl.secretbox.open(encryptedUint8Array, decodedNonce, key);

    if (!decrypted) {
      throw new Error('Decryption failed');
    }

    return naclUtil.encodeUTF8(decrypted);
  } catch (error) {
    const errMessage = "Error decrypting data: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "decryptData"
    });

    return null; // Return null in case of an error
  }
}

onMounted(async () => {
  try {
    SharedVariables.compareAndHandleVersion();

    // Cek apakah preRegistrationEvent bernilai true
    if (SharedVariables.preRegistrationEvent) {
      // Redirect ke pre-registration-event.vue
      await router.push('/pre-registration-event');
      return; // Hentikan eksekusi kode lebih lanjut setelah redirect
    }

    await nuxtApp.$redirectIfAdminLoggedIn();  // Panggil fungsi redirectIfLoggedIn

    const encryptedDescription = localStorage.getItem('encryptedDescription');
    if (Shared_variables_ro.isDevelopment) {
      console.log("description" + encryptedDescription);
    }
    if (!encryptedDescription) {
      return router.push('/');
    }

    await nuxtApp.$redirectIfAdminLoggedIn();
    isUserLoggedIn.value = useNuxtApp().$checkUserUid();
    await fetchUserCoinBalance();

    userUID = localStorage.getItem('user_uid');
    UID = localStorage.getItem('uid');

    isLoading.value = true;

    const fetchTasks = [
      await fetchUserCoinBalance(),
      await fetchDiscounts(),
      await fetchEncryptionTokenAndDecrypt(),
    ];
    await fetchTotal();

    await Promise.all(fetchTasks);

    if (Shared_variables_ro.isDevelopment) {
      console.log("Raw decryptedArtworkId value:", decryptedArtworkId.value); // Melihat nilai sebenarnya
    }

  } catch (error) {
    const errMessage = "Error in onMounted in checkout-tiers.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "onMounted"
    });
  } finally {
    isLoading.value = false;
  }
});

onBeforeUnmount(() => {
  try {
    if (analytics && logEvent) {
      const endTime = Date.now(); // Simpan waktu saat pengguna meninggalkan halaman
      const duration = (endTime - startTime) / 1000; // Hitung durasi dalam detik

      // Log event ke Firebase Analytics dengan durasi pengguna di halaman ini
      logEvent(analytics, pageName, {
        duration: duration // Durasi dalam detik
      });
    }
  } catch (error) {
    const errMessage = "Error in onBeforeUnmount in checkout-tiers.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue", // Sertakan direktori file
      whatFunction: "onBeforeUnmount"
    });
  }
});

const handlePaymentSuccess = async ({message, sts_transaction, payment_method, planTitle}) => {
  handlePayProgress({message: 'Processing payment...'}); // Panggil handlePayProgress saat loading dimulai

  isTransactionCompleted.value = true;

  userUID = localStorage.getItem('user_uid');
  UID = localStorage.getItem('uid');

  if (Shared_variables_ro.isDevelopment) {
    console.log("planTitle:", planTitle);
    console.log("Document IDS:" + documentId);
    console.log("userUID:", userUID);
    console.log("UID" + UID);
  }

  try {
    isSaving.value = true;

    if (!userUID) {
      throw new Error('User UID is not available.');
    }

    // Implementasi lainnya...

  } catch (error) {
    const errMessage = "Error handling payment success in checkout-tiers.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "handlePaymentSuccess"
    });

    await handlePaymentError({
      message: error.message,
      title: 'Transaction Error',
      status: 'error'
    });
  } finally {
    isSaving.value = false;
  }
};

// Fungsi untuk menangani pembayaran PayPal yang berhasil
const handlePayPalPaymentSuccess = async ({message, sts_transaction, payment_method, planTitle}) => {
  try {
    isSaving.value = true;
    if (!userUID) {
      throw new Error('User UID is not available');
    }

    // Ambil detail pengguna dari node 'user' di Firestore
    const userCollectionRef = $firebase.collection($firebase.db, "user");
    const userQuery = $firebase.query(userCollectionRef, $firebase.where("user_uid", "==", userUID));
    const userQuerySnapshot = await $firebase.getDocs(userQuery);

    if (userQuerySnapshot.empty) {
      throw new Error('User data not found.');
    }

    const userData = userQuerySnapshot.docs[0].data(); // Mendapatkan data pengguna
    const invoiceID = generateInvoiceID();

    // Jika planTitle adalah "BLANX Community", update data di node "community"
    if (planTitle == 'BLANX Community') {
      const artworkIdInt = parseInt(decryptedArtworkId.value, 10);
      const communityCollectionRef = $firebase.collection($firebase.db, "community");
      const communityQuery = $firebase.query(
          communityCollectionRef,
          $firebase.where("artwork_id", "==", artworkIdInt)
      );

      const communitySnapshot = await $firebase.getDocs(communityQuery);

      if (communitySnapshot.empty) {
        throw new Error('Community data not found.');
      }

      const communityData = communitySnapshot.docs[0].data(); // Mengambil data dari dokumen pertama
      const communityDocRef = communitySnapshot.docs[0].ref; // Mendapatkan referensi dokumen pertama

      const updatedUIDs = communityData.downloaded_by_user_uid || [];
      updatedUIDs.push(userUID);

      const sku = `artwork_id-${communityData.artwork_id}`;

      const transactionData = {
        address: userData.address,
        consumer_name: `${userData.first_name} ${userData.last_name}`,
        created_date: $firebase.serverTimestamp(),
        invoice_id: invoiceID,
        phone_number: userData.phone_number || '',
        payment_method,
        sku: [sku],
        sts_transaction,
      };

      const historyTransactionRef = $firebase.collection($firebase.db, "history_transaction", UID, "transaction");
      await $firebase.addDoc(historyTransactionRef, transactionData);

      await $firebase.updateDoc(communityDocRef, {
        downloaded_by_user_uid: updatedUIDs,
        downloaded_counter: (communityData.downloaded_counter || 0) + 1
      });

      if (selectedUseCoins.value && userData.coin_balance > 0) {
        userCoinBalance.value -= coinsUsed.value;

        const userDocRef = $firebase.doc($firebase.db, 'user', userQuerySnapshot.docs[0].id);
        await $firebase.updateDoc(userDocRef, {
          coin_balance: userCoinBalance.value
        });
      }

      const downloadUrl = communityData.generated_image || artworkImage.value;
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `artwork_${communityData.artwork_id}.jpg`;
      link.click();

      if (discountCode.value) {
        await updateDiscountData(userUID, discountCode.value);
      }

      await handlePaymentError({
        message: `A payment of $${total.value} has been successfully made using the ${payment_method} payment method.`,
        title: "Transaction Successful",
        status: "success",
        action: false,
        autoMessageChoice: "route to home"
      });
    } else {
      // Implementasi untuk paket selain BLANX Community
      // ...
    }

  } catch (error) {
    const errMessage = "Error processing PayPal payment in checkout-tiers.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "handlePayPalPaymentSuccess"
    });

    await handlePaymentError({
      message: error.message,
      title: 'Transaction Error',
      status: 'error'
    });
  } finally {
    isSaving.value = false;
  }
};

function eligible() {
  try {
    if (useCoins.value || (discountCode.value && total.value === 0)) {
      isPayPalDisabled.value = true;
    } else {
      isPayPalDisabled.value = false;
    }

    if (Shared_variables_ro.isDevelopment) {
      console.log("PayPal Disabled Status:", isPayPalDisabled.value);
    }
  } catch (error) {
    const errMessage = "Error in eligible function in checkout-tiers.vue: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/checkout-tiers.vue",
      whatFunction: "eligible"
    });
  }
}

function disablePayPal() {
  const paypalRadioButton = document.getElementById('paypal-method');
  if (paypalRadioButton) {
    paypalRadioButton.disabled = true;
  }

  // Memastikan fungsi `initPayPalButtons` tidak dijalankan
  emit('disablePayPalButtons');
}


const generateInvoiceID = () => {
  const date = new Date();
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  return `INV/${year}${month}${day}${hours}${minutes}`;
};

</script>

<style scoped>
.body-section {
  position: relative;
  min-width: 100%;
  min-height: 100vh;
  background-image: url('@/assets/images/background_for_page_ai.png');
  background-size: cover;
  background-position: center;
  display: flex;
  justify-content: center;
  align-items: center;
}

.payment-container {
  display: flex;
  flex-direction: column;
  padding: 20px;
  max-width: 1200px;
  //margin: 0 auto;
  background-color: #FFFFFF;
  border-radius: 20px;
}

.checkout-container {
  padding: 20px;
  display: flex;
  //justify-content: space-between;
  //background-color: #8e117b;
  gap: 1px;
}


.order-summary {
  //background-color: #a31d1d;
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  height: 100%;
  width: 50%;
  margin-left: 10%;
}


.summary-header {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.plan-image {
  width: 100px;
  height: auto;
}

.price {
  font-size: 24px;
  font-weight: bold;
  display: flex;
  justify-content: right;
}

.discount-section {
  display: flex;
  gap: 10px;
  margin-top: 20px;
  //background-color: #8e117b;
}


.summary-form {

  margin-left: 50px;
}

.summary-details {
  margin-top: 20px;
}

.summary-details p {
  display: flex;
  justify-content: space-between;
  margin: 5px 0;
  font-size: 18px;
  font-weight: bold;
}

.discount-input {
  flex-grow: 1;
  padding: 10px;
  border-radius: 20px;
  border: 1px solid #ddd;
}

.apply-button {
  background-color: #29ABE1;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 30px;
  cursor: pointer;
  margin-top: 1px;
  width: 40%;
}

.apply-button:hover {
  background-color: #0056b3;

}

.back-button {
  font-size: 26px;
  background: none;
  border: none;
  cursor: pointer;
  color: #007bff;
  display: flex;
  justify-content: left;
}

.title {
  font-size: 36px;
  font-weight: bold;
  margin: 40px 10px;
  text-align: center;
}

.coin-redemption-section {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 10px;
}

.coin-toggle {
  display: flex;
  align-items: center;
  margin-top: 20px;
  gap: 10px;
  cursor: pointer;
}

.coin-toggle input {
  margin-left: 10px;
}

.slider {
  width: 40px;
  height: 20px;
  background-color: #ccc;
  border-radius: 20px;
  position: relative;
  transition: background-color 0.3s;
}

.slider:before {
  content: "";
  position: absolute;
  width: 18px;
  height: 18px;
  background-color: white;
  border-radius: 50%;
  top: 1px;
  left: 1px;
  transition: 0.3s;
}

.slider-active {
  background-color: #29abe1;
}

.slider-active:before {
  transform: translateX(20px);
}

input:checked + .slider {
  background-color: #29abe1;
}

input:checked + .slider:before {
  transform: translateX(20px);
}

.coin-discount {
  margin-top: 10px;
  color: green;
  font-weight: bold;
}
</style>
