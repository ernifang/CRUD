<template>
  <div @contextmenu.prevent>

    <LoadingOverlay :isVisible="isLoading" loadingText="Processing, please wait..."/>

    <!-- Navbar -->
    <Navbar :isAdmin="false" :isLoggedIn="isUserLoggedIn"/>

    <!-- Payment Details Section -->
    <div class="payment-container">
      <div class="payment-header-container">
        <button class="back-button" @click="goBack">
          <img alt="Back Button" src="@/assets/icon/simple_arrow_left_enabled_magenta.png"
               style="width: 24px; object-fit: contain">
        </button>
        <h1 class="page-title" style="width: 100%">PAYMENT DETAILS</h1>
      </div>

      <div class="payment-content">
        <!-- Left Section: Payment Form -->
        <div class="payment-form-section">
          <form>
            <div v-if="transactionProfiles.length > 0" class="form-group">
              <label for="transaction-profile">Select User for Transaction</label>
              <select id="transaction-profile" v-model="selectedProfile" :disabled="showPaymentComponent"
                      @change="handleProfileChange">
                <option value="another">Transaction for another user</option>
                <option v-for="(profile, index) in transactionProfiles" :key="index" :value="index">{{
                    profile.saved_as
                  }}
                </option>
              </select>
            </div>

            <!-- Email Address -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="email">Email Address</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;"
                     @click="toggleReadOnly('email')"/>
              </div>
              <input id="email" v-model="email" :readonly="isFormReadOnly || showPaymentComponent"
                     placeholder="Enter your email" required
                     type="email"/>
            </div>

            <!-- Name Section -->
            <div class="name-section">
              <div class="form-group">
                <div class="form-title-container">
                  <label for="first-name">First Name</label>
                  <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                       style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('firstName')"/>
                </div>
                <input id="first-name" v-model="firstName" :readonly="isFormReadOnly || showPaymentComponent"
                       placeholder="First Name" required
                       type="text"/>
              </div>
              <div class="form-group">
                <div class="form-title-container">
                  <label for="last-name">Last Name</label>
                  <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                       style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('lastName')"/>
                </div>
                <input id="last-name" v-model="lastName" :readonly="isFormReadOnly || showPaymentComponent"
                       placeholder="Last Name" required
                       type="text"/>
              </div>
            </div>

            <!-- Country / Region -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="country">Country / Region</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('country')"/>
              </div>
              <select id="country" v-model="country" :readonly="isFormReadOnly || showPaymentComponent" required
                      @change="fetchProvinces">
                <option disabled value="">Select Country</option>
                <option v-for="countryItem in countries" :key="countryItem.iso2" :value="countryItem.iso2">
                  {{ countryItem.name }}
                </option>
              </select>
            </div>

            <!-- Province / State -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="province">Province / State</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('province')"/>
              </div>
              <select id="province" v-model="province" :readonly="isFormReadOnly || showPaymentComponent" required
                      @change="fetchCities">
                <option disabled value="">Select Province</option>
                <option v-for="provinceItem in provinces" :key="provinceItem.iso2" :value="provinceItem.iso2">
                  {{ provinceItem.name }}
                </option>
              </select>
            </div>

            <!-- City -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="city">City</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;"
                     @click="toggleReadOnly('city')"/>
              </div>
              <select id="city" v-model="city" :readonly="isFormReadOnly || showPaymentComponent" required
                      @change="fetchZipCodes">
                <option disabled value="">Select City</option>
                <option v-for="cityItem in cities" :key="cityItem.id" :value="cityItem.name">{{
                    cityItem.name
                  }}
                </option>
              </select>
            </div>

            <!-- Postal Code -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="postal-code">Postal Code</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('postalCode')"/>
              </div>
              <select id="postal-code" v-model="postalCode" :readonly="isFormReadOnly || showPaymentComponent" required>
                <option disabled value="">Select Postal Code</option>
                <option v-for="zip in zipCodes" :key="zip" :value="zip">{{ zip }}</option>
              </select>
            </div>

            <!-- Address -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="address">Address</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('address')"/>
              </div>
              <textarea id="address" v-model="address" :readonly="isFormReadOnly || showPaymentComponent"
                        placeholder="Enter your address"
                        required
                        rows="3"></textarea>
            </div>

            <!-- Save Information -->
            <div v-if="selectedProfile === 'another'" class="save-info">
              <input id="save-info" v-model="saveInfo" :readonly="isFormReadOnly || showPaymentComponent"
                     type="checkbox"/>
              <label for="save-info">Save this information for later</label>
            </div>

            <!-- Sebagai disimpan dengan -->
            <div class="form-group">
              <div class="form-title-container">
                <label for="saved-as">Save Profile As</label>
                <img v-if="isFormReadOnly" alt="Edit Icon" src="@/assets/icon/edit.png"
                     style="width: 16px; cursor: pointer; margin-left: 5px;" @click="toggleReadOnly('saveProfileAs')"/>
              </div>
              <input id="saved-as" v-model="savedAs" :readonly="isFormReadOnly || showPaymentComponent"
                     placeholder="Save Profile As"
                     type="text"/>
            </div>

            <!-- Shipping Methods -->
            <div class="form-group">
              <label for="shipping-method">Shipping Methods</label>
              <select id="shipping-method" v-model="shippingMethod" disabled>
                <option value="AgentX">STANDARD</option>
                <!-- Tambahkan opsi lain jika diperlukan -->
              </select>
            </div>
          </form>
        </div>

        <!-- Right Section: Order Summary -->
        <div class="order-summary-section">
          <div class="summary-header">
            <h2 style="font-weight: bolder">Order Summary</h2>
          </div>

          <!-- Product List -->
          <div class="product-list">
            <div v-for="(product, index) in productList" :key="index" class="product-item">
              <img :src="product.image" alt="Product Image" class="product-image"/>
              <div class="product-info">
                <h3>{{ product.name }}</h3>
                <p>{{ product.quantity }} x ${{ product.price }}</p>
                <p>
                  Total:
                  <!-- Jika ada harga diskon, tampilkan harga total yang sudah dicoret -->
                  <span v-if="product.discountedTotal" style="text-decoration: line-through;">
          ${{ product.quantity * product.price }}
        </span>
                  <!-- Tampilkan total harga diskon -->
                  <span v-if="product.discountedTotal">
          ${{ product.discountedTotal }}
        </span>
                  <!-- Jika tidak ada diskon, tampilkan harga total biasa -->
                  <span v-else>
          ${{ product.quantity * product.price }}
        </span>
                </p>
              </div>
            </div>
          </div>

          <!-- Discount Code -->
          <!-- Discount Code -->
          <div class="discount-section">
            <input
                v-model="discountCode"
                :class="{ 'input-readonly': showPaymentComponent }"
                :readonly="showPaymentComponent"
                class="discount-input"
                placeholder="Discount Code"
                type="text"
            />

            <button
                :disabled="!discountCode || showPaymentComponent"
                class="apply-button"
                @click="applyDiscount">
              Apply
            </button>
          </div>

          <!-- Price Summary -->
          <div class="summary-details">
            <p class="summary-item">
              <span>Subtotal:</span>
              <span>$ {{ subtotal }}</span>
            </p>
            <p v-if="shippingCost > 0" class="summary-item">
              <span>Shipping:</span>
              <span>$ {{ shippingCost }}</span>
            </p>
            <!-- Element diskon -->
            <p v-if="discountAmount > 0" class="summary-item">
              <span>Discount:</span>
              <span> - $ {{ discountAmount }}</span>
            </p>
            <p class="summary-item total">
              <span>Total:</span>
              <span>$ {{ total }}</span>
            </p>
          </div>

          <!-- Pay Now Button -->
          <!-- Pay Now Button -->
          <button
              v-if="showBtnPayment"
              class="pay-now-button"
              @click="handlePayment">
            Proceed to Payment
          </button>


          <!-- Payment Details -->
          <div v-if="showPaymentComponent" class="payment-component-container">
            <payment
                :customWidth="customWidth"
                :planTitle="'Product Payment'"
                :sourcePage="'Product Payment'"
                :total="price"
                @PayProgress="handlePayProgress"
                @onPayPalPaymentSuccess="handlePayPalPaymentSuccess"
                @onPaymentError="handlePaymentError"
                @onPaymentSuccess="handlePaymentSuccess"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <Footer/>

    <!-- MacErrorMessage component -->
    <div v-if="showMacErrorMessage" class="pop-up-message">
      <MacErrorMessage
          :autoMessageChoice="macErrorMessageAutoMessageChoice"
          :message="macErrorMessageMessage"
          :requiredActionButton="macErrorMessageRequiredActionButton"
          :status="macErrorMessageStatus"
          :title="macErrorMessageTitle"
          @close="closeMacErrorMessage"
      />
    </div>

  </div>
</template>

<script setup>
import {computed, onBeforeUnmount, onMounted, ref} from 'vue';
import {useRouter} from 'vue-router';
import Navbar from '~/components/Navbar.vue';
import Footer from '~/components/Footer.vue';
import Payment from '~/components/payment.vue';
import {useNuxtApp} from '#app';
import MacErrorMessage from '~/components/MacMessage.vue';
import SharedVariables from "~/config/shared_variables_ro.js";
import LoadingOverlay from '~/components/LoadingOverlay.vue';

const isUserLoggedIn = ref(false);
const email = ref('');
const firstName = ref('');
const lastName = ref('');
const country = ref('');
const province = ref('');
const address = ref('');
const city = ref('');
const postalCode = ref('');
const phone = ref('');
const saveInfo = ref(false);
const shippingMethod = ref('AgentX');
const discountCode = ref('');
const price = ref(5);
const customWidth = ref(100);
const showMacErrorMessage = ref(false); // State untuk kontrol tampilan MacErrorMessage
const macErrorMessageStatus = ref("");
const macErrorMessageTitle = ref("");
const macErrorMessageMessage = ref("");
const macErrorMessageRequiredActionButton = ref(true);
const macErrorMessageAutoMessageChoice = ref("");
const countries = ref([]);
const provinces = ref([]);
const cities = ref([]);
const zipCodes = ref([]);
const selectedVariantsMap = ref(new Map()); // Map to store product variant data
const savedAs = ref("");
const showPaymentComponent = ref(false); // Menentukan apakah komponen payment ditampilkan
const showBtnPayment = ref(true);
// Sample product list for summary
const productList = ref([]);
const shippingCost = ref(0);
const transactionProfiles = ref([]); // Array untuk menyimpan data profil transaksi
const selectedProfile = ref("another"); // Profil yang dipilih
const isFormReadOnly = ref(false);
const isLoading = ref(false);
const discountAmount = ref(0); // Tambahkan variabel untuk menyimpan jumlah diskon
const allQty = ref(0);

const router = useRouter();
const nuxtApp = useNuxtApp();
const {$firebase} = useNuxtApp();

const analytics = nuxtApp.$firebase.analytics;
const logEvent = nuxtApp.$firebase.logEvent;

let startTime = Date.now(); // Untuk menyimpan waktu mulai
const pageName = 'product-payment.vue'; // Nama halaman yang sedang dilihat

let orderId; // Variabel untuk menyimpan ID order

const subtotal = computed(() => {
  return productList.value.reduce((total, product) => total + product.price * product.quantity, 0);
});

const total = computed(() => {
  return (subtotal.value - discountAmount.value) + shippingCost.value;
});

// Function to go back to the previous page
const goBack = () => {
  window.history.back();
};

const fetchCountries = async () => {
  try {
    isLoading.value = true;

    const response = await fetch('https://us-central1-blanx-project.cloudfunctions.net/getCountries');
    countries.value = await response.json();

    if (SharedVariables.isDevelopment) {
      console.log("Isi Negara : ");
      console.log(JSON.stringify(countries.value));
    }
  } catch (error) {
    if (SharedVariables.isDevelopment) console.error('Error fetching countries:', error);

    const errMessage = "Error fetching countries: " + error;

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "fetchCountries"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

const fetchProvinces = async () => {
  try {
    isLoading.value = true;

    const response = await fetch(`https://us-central1-blanx-project.cloudfunctions.net/getProvincesByCountry?countryCode=${country.value}`);
    provinces.value = await response.json();

    if (SharedVariables.isDevelopment) {
      console.log("Isi Provinsi : ");
      console.log(JSON.stringify(provinces.value));
    }
  } catch (error) {
    if (SharedVariables.isDevelopment) console.error('Error fetching provinces:', error);

    const errMessage = "Error fetching provinces: " + error;

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "fetchProvinces"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

const fetchCities = async () => {
  try {
    isLoading.value = true;

    const response = await fetch(`https://us-central1-blanx-project.cloudfunctions.net/getCitiesByProvince?countryCode=${country.value}&stateCode=${province.value}`);
    const data = await response.json();
    cities.value = data.cities; // Pastikan untuk mengisi cities.value dengan benar

    if (SharedVariables.isDevelopment) {
      console.log("Isi kota : ", JSON.stringify(cities.value));
    }
  } catch (error) {
    if (SharedVariables.isDevelopment) console.error('Error fetching cities:', error);

    const errMessage = "Error fetching cities: " + error;

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "fetchCities"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Fetch zip codes based on city
const fetchZipCodes = async () => {
  if (!city.value) return; // Pastikan ada nilai untuk 'city'

  try {
    isLoading.value = true;

    // Cari kota yang dipilih berdasarkan 'city.value' di array 'cities'
    const selectedCity = cities.value.find(cityItem => cityItem.name === city.value);

    if (!selectedCity || !selectedCity.latitude || !selectedCity.longitude) {
      if (SharedVariables.isDevelopment) console.error("Latitude atau Longitude tidak ditemukan untuk kota yang dipilih.");
      return;
    }

    const lat = selectedCity.latitude;
    const lng = selectedCity.longitude;

    if (SharedVariables.isDevelopment) {
      console.log('Latitude dan Longitude dari kota yang dipilih:', lat, lng);
    }

    // Buat URL fetch dengan latitude dan longitude yang diperoleh
    const response = await fetch(`https://us-central1-blanx-project.cloudfunctions.net/getZipCodeByLatLng?lat=${lat}&lng=${lng}`);

    // Mengisi zipCodes.value dengan hasil dari API
    zipCodes.value = await response.json();

    if (SharedVariables.isDevelopment) {
      console.log("Isi Postal Code : ", JSON.stringify(zipCodes.value));
    }
  } catch (error) {
    if (SharedVariables.isDevelopment) console.error('Error fetching zip codes:', error);

    const errMessage = "Error fetching zip codes: " + error;

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "fetchZipCodes"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

const handleProfileChange = () => {
  try {
    if (selectedProfile.value === "another") {
      resetForm(); // Hapus data form jika memilih "Transaction for another user"
      isFormReadOnly.value = false;
      showPaymentComponent.value = false;
    } else {
      const profileData = transactionProfiles.value[selectedProfile.value];
      if (!profileData) {
        throw new Error("Profile data is not found for the selected profile");
      }
      setFormWithData(profileData); // Isi form dengan data profil yang dipilih
      isFormReadOnly.value = true; // Set ke read-only saat profil yang ada dipilih
      showPaymentComponent.value = false;
    }
  } catch (error) {
    if (SharedVariables.isDevelopment) console.error("Error handling profile change:", error);

    const errMessage = "Error handling profile change: " + error;

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "handleProfileChange"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  }
};

const resetForm = async () => {
  try {
    isLoading.value = true;

    email.value = '';
    firstName.value = '';
    lastName.value = '';
    country.value = '';
    province.value = '';
    city.value = '';
    postalCode.value = '';
    address.value = '';
    savedAs.value = '';
    shippingMethod.value = '';

    await fetchProvinces(); // Refresh province list
    await fetchCities();    // Refresh city list
    await fetchZipCodes();  // Refresh zip code list
  } catch (error) {
    if (SharedVariables.isDevelopment) console.error("Error resetting form:", error);

    const errMessage = "Error resetting form: " + error;

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "resetForm"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

const setFormWithData = async (profileData) => {
  try {
    isLoading.value = true;

    email.value = profileData.email;
    firstName.value = profileData.first_name;
    lastName.value = profileData.last_name;
    country.value = profileData.country_id;
    province.value = profileData.province_id;
    city.value = profileData.city_id;
    postalCode.value = profileData.postal_code;
    address.value = profileData.address;
    savedAs.value = profileData.saved_as;
    // shippingMethod.value = "AgentX"; // Adjust as necessary

    await fetchProvinces(); // Setel ulang data provinsi
    await fetchCities();    // Setel ulang data kota
    await fetchZipCodes();  // Setel ulang kode pos
  } catch (error) {
    const errMessage = "Error setting form data: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "setFormWithData"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Lifecycle hook to handle authentication and redirect if needed
onMounted(async () => {
  SharedVariables.compareAndHandleVersion();

  // Cek apakah preRegistrationEvent bernilai true
  if (SharedVariables.preRegistrationEvent) {
    // Redirect ke pre-registration-event.vue
    await router.push('/pre-registration-event');
    return; // Hentikan eksekusi kode lebih lanjut setelah redirect
  }

  await nuxtApp.$redirectIfAdminLoggedIn();  // Panggil fungsi redirectIfLoggedIn

  isUserLoggedIn.value = useNuxtApp().$checkUserUid();

  SharedVariables.clearEncryptedDataForCommunity();

  isLoading.value = true;

  await fetchCountries();

  // Ambil data dari local storage dengan key 'product-container'
  const productContainer = localStorage.getItem('product-container');

  if (productContainer) {
    try {
      // Dekripsi dari base64
      const decodedData = atob(productContainer);

      // Parse JSON menjadi bentuk array
      selectedVariantsMap.value = JSON.parse(decodedData);

      if (SharedVariables.isDevelopment) {
        console.log("Data Product Variants Map:", JSON.stringify([...selectedVariantsMap.value]));
      }

      // Retrieve 'selectedProducts' from local storage
      const selectedProducts = JSON.parse(localStorage.getItem('selectedProducts'));

      try {
        for (const [productId, variantData] of selectedVariantsMap.value) {
          const response = await fetch(`https://us-central1-blanx-project.cloudfunctions.net/getPrintfulProductDetails?productId=${productId}`);
          const data = await response.json();

          if (data && data.result && data.result.product) {
            const productDetails = selectedProducts.find(item => item.id_printful === productId);

            // Menghitung total quantity dari seluruh variant untuk produk ini
            const totalQuantity = variantData.reduce((acc, variant) => acc + variant.quantity, 0);

            allQty.value += totalQuantity;

            productList.value.push({
              id_printful: productId, // Adding product ID (id_printful) to the product list
              name: data.result.product.title,
              image: data.result.product.image,
              quantity: totalQuantity,
              price: productDetails ? productDetails.price : variantData[0].price
            });
          }
        }
      } catch (error) {
        const errMessage = "Error fetching product details: " + error;

        console.error(errMessage);

        SharedVariables.errorReport({
          errorReportByDev: errMessage,
          errorReportBySystem: error.message,
          errorStackReportBySystem: error.stack,
          whatPlatform: "Client",
          whatPage: "pages/product-payment.vue",
          whatFunction: "onMounted (fetch product details)"
        });

        showMacMessage("error", "SYSTEM ERROR", "A system error has occurred!", false, "route to home");
      }
    } catch (error) {
      const errMessage = "Error parsing product-container data: " + error;

      console.error(errMessage);

      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: error.message,
        errorStackReportBySystem: error.stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "onMounted (parse product-container)"
      });

      showMacMessage("error", "SYSTEM ERROR", "A system error has occurred!", false, "route to home");
    } finally {
      isLoading.value = false;
    }
  }

  // Dapatkan user_uid dari localStorage
  const userUID = localStorage.getItem("user_uid");
  if (!userUID) return;

  try {
    // Query untuk mendapatkan data user dengan user_uid yang sesuai
    const userQuery = $firebase.query($firebase.collection($firebase.db, "user"), $firebase.where("user_uid", "==", userUID));
    const querySnapshot = await $firebase.getDocs(userQuery);

    if (!querySnapshot.empty) {
      const docData = querySnapshot.docs[0].data();
      transactionProfiles.value = docData.transaction_user || [];
    }

    // Jika ada profil, atur selectedProfile menjadi "another"
    if (transactionProfiles.value.length > 0) {
      selectedProfile.value = "another";
    }
  } catch (error) {
    const errMessage = "Error fetching user profile: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "onMounted (fetch user profile)"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
});

onBeforeUnmount(() => {
  if (analytics && logEvent) {
    try {
      const endTime = Date.now(); // Simpan waktu saat pengguna meninggalkan halaman
      const duration = (endTime - startTime) / 1000; // Hitung durasi dalam detik

      // Log event ke Firebase Analytics dengan durasi pengguna di halaman ini
      logEvent(analytics, pageName, {
        duration: duration // Durasi dalam detik
      });

    } catch (error) {
      const errMessage = "Error logging page duration: " + error;

      console.error(errMessage);

      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: error.message,
        errorStackReportBySystem: error.stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "onBeforeUnmount (logEvent)"
      });
    }
  }
});

const createPrintfulOrder = async (paymentMethod) => {
  isLoading.value = true;

  try {
    const selectedCountry = countries.value.find(countryItem => countryItem.iso2 === country.value);
    const selectedProvince = provinces.value.find(provinceItem => provinceItem.iso2 === province.value);

    const recipient = {
      name: `${firstName.value} ${lastName.value}`,
      company: "",
      address1: address.value,
      address2: "",
      city: city.value,
      state_code: province.value,
      state_name: selectedProvince ? selectedProvince.name : "",
      country_code: country.value,
      country_name: selectedCountry ? selectedCountry.name : "",
      zip: postalCode.value,
      phone: phone.value,
      email: email.value,
      tax_number: ""
    };

    const items = [];

    for (const [productId, variants] of selectedVariantsMap.value) {
      for (const [index, variant] of variants.entries()) {
        // Fetch printfile details for the current variant
        let width, height, aspectRatio;
        try {
          const response = await fetch(
              `https://us-central1-blanx-project.cloudfunctions.net/getPrintfulPrintfileDetails?productId=${productId}&variantId=${variant.productId}&type=${variant.files.type}`
          );
          const data = await response.json();

          if (data && data.data) {
            width = data.data.width;
            height = data.data.height;
            aspectRatio = data.data.aspect_ratio;
          } else {
            throw new Error("Invalid printfile details response");
          }
        } catch (error) {
          const errMessage = `Failed to get printfile details for product ${productId}: ` + error;

          console.error(errMessage);

          SharedVariables.errorReport({
            errorReportByDev: errMessage,
            errorReportBySystem: error.message,
            errorStackReportBySystem: error.stack,
            whatPlatform: "Client",
            whatPage: "pages/product-payment.vue",
            whatFunction: "createPrintfulOrder (fetch printfile details)"
          });

          showMacMessage("error", "SYSTEM ERROR", "A system error has occurred!", false, "route to home");
          return;
        }

        // Adjust the area dimensions based on the response
        const adjustedAreaWidth = width;
        const adjustedAreaHeight = variant.files.position.area_height / aspectRatio;

        items.push({
          id: index + 1,
          external_id: `item-${productId}-${index + 1}`,
          variant_id: variant.productId,
          quantity: variant.quantity,
          price: variant.price,
          retail_price: variant.price,
          name: variant.product_variant,
          product: {
            variant_id: variant.productId,
            product_id: productId,
            image: variant.mockup_url,
            name: variant.product_variant
          },
          files: [
            {
              type: variant.files.type,
              url: variant.files.url,
              options: variant.files.options || [],
              filename: variant.files.filename,
              visible: variant.files.visible,
              position: {
                ...variant.files.position,
                area_height: adjustedAreaHeight,
                dpi: 96,
                fill_mode: "fit",
                can_rotate: false
              }
            }
          ],
          options: [],
          sku: null,
          discontinued: false,
          out_of_stock: false
        });
      }
    }

    const retailCosts = {
      currency: "USD",
      subtotal: `${subtotal.value}`,
      discount: `${discountAmount.value}`,
      shipping: `${shippingCost.value}`,
      tax: "0.00"
    };

    const packingSlip = {
      email: "weareblanx@gmail.com",
      phone: "+15623460961",
      message: "Thank you for choosing our product! Your support means everything to us. We hope it brings value to your life. If there's anything more we can do for you, feel free to reach out.",
      logo_url: "https://files.cdn.printful.com/branding/14395/14395543/1728553264.png",
      store_name: "BLANX",
      custom_order_id: `BLANX-${new Date().toISOString().slice(0, 10).replace(/-/g, '')}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`
    };

    const requestBody = {
      external_id: "",
      shipping: "STANDARD",
      recipient,
      items,
      retail_costs: retailCosts,
      gift: {
        subject: `To ${firstName.value} ${lastName.value}`,
        message: "Have a nice day"
      },
      packing_slip: packingSlip
    };

    if (SharedVariables.isDevelopment) {
      console.log("Request body for createPrintfulOrder:", JSON.stringify(requestBody));
    }

    const response = await fetch('https://us-central1-blanx-project.cloudfunctions.net/createPrintfulOrder', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    const responseData = await response.json();

    if (response.ok) {
      await transactionDone(paymentMethod, responseData.orderId);
      showMacMessage("success", "Transaction Successful", `A payment of $${total.value} has been successfully made!`, false, "route to home");
    } else {
      showMacMessage("error", "Order Failed", "Unable to place the order! Please contact support.", false, "route to home");
    }
  } catch (error) {
    const errMessage = "Error during payment process: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "createPrintfulOrder"
    });

    showMacMessage("error", "Order Failed", "Unable to place the order! Please contact support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

const transactionDone = async (paymentMethod, orderId) => {
  // Panggil function confirmPrintfulOrder setelah createPrintfulOrder
  // await confirmPrintfulOrder(orderId);

  await recordTransactionToFirestore(paymentMethod, orderId);

  try {
    await SharedVariables.clearEncryptedData();
  } catch (error) {
    const errMessage = "Error clearing encrypted data: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "transactionDone"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  }

  showPaymentComponent.value = false;
};

const confirmPrintfulOrder = async (orderId) => {
  isLoading.value = true;

  try {
    if (!orderId) {
      if (SharedVariables.isDevelopment) console.error("Order ID tidak ditemukan");
      return;
    }

    const response = await fetch('https://us-central1-blanx-project.cloudfunctions.net/confirmPrintfulOrder', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({orderId}), // Kirimkan ID order dalam request body
    });

    if (response.ok) {
      const responseData = await response.json();

      if (SharedVariables.isDevelopment) {
        console.log("Order confirmed successfully:", responseData);
      }
    } else {
      showMacMessage("error", "Order Confirmation Failed", "Unable to confirm the order! Please contact support.", false, "route to home");

      throw new Error("Failed to confirm the order.");
    }
  } catch (error) {
    const errMessage = "Error confirming order: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "confirmPrintfulOrder"
    });

    showMacMessage("error", "Order Confirmation Failed", "Unable to confirm the order! Please contact support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};


const recordTransactionToFirestore = async (paymentMethod, orderId) => {
  isLoading.value = true;

  orderId = "PF" + orderId;

  try {
    // Ambil user_uid dari localStorage
    const userUID = localStorage.getItem("user_uid");
    if (!userUID) {
      throw new Error("User UID tidak ditemukan di localStorage");
    }

    // Query untuk mendapatkan data pengguna berdasarkan user_uid
    const userQuery = $firebase.query(
        $firebase.collection($firebase.db, "user"),
        $firebase.where("user_uid", "==", userUID)
    );
    const querySnapshot = await $firebase.getDocs(userQuery);

    if (querySnapshot.empty) {
      throw new Error("User dengan user_uid tersebut tidak ditemukan");
    }

    const docRef = querySnapshot.docs[0].ref;
    const userData = querySnapshot.docs[0].data();
    const uid = userData.uid; // Ambil value dari field uid untuk digunakan pada collection path

    // Ambil data produk dari localStorage dengan key 'selectedProducts'
    const selectedProducts = JSON.parse(localStorage.getItem('selectedProducts'));

    // Siapkan data untuk transaksi
    const transactionData = {
      address: address.value, // Diambil dari form
      consumer_name: `${firstName.value} ${lastName.value}`, // Diambil dari form
      created_date: new Date().toISOString(), // Tanggal pembuatan transaksi
      invoice_id: `INV/${new Date().toISOString().replace(/[-:.TZ]/g, '')}`, // Format invoice ID
      payment_method: paymentMethod, // Diterima dari parameter fungsi
      phone_number: phone.value, // Diambil dari variable phone
      order_printful_id: orderId,
      sku: [], // Array kosong untuk menampung SKU
      sts_transaction: "succeeded" // Status transaksi selalu "succeeded"
    };

    // Looping untuk mencatat SKU
    for (const [productId, variants] of selectedVariantsMap.value) {
      const selectedProduct = selectedProducts.find(item => item.id_printful === productId);
      if (!selectedProduct) continue;

      // Ambil id_product dari produk yang sesuai
      const productID = selectedProduct.id_product;

      // Looping tiap varian untuk mendapatkan informasi SKU
      variants.forEach(variant => {
        const colorName = variant.product_color || "UnknownColor"; // Ambil nama warna varian
        const sizeName = variant.product_size || "UnknownSize"; // Ambil ukuran varian
        const qty = variant.quantity || 0; // Ambil jumlah varian

        const sku = `${productID}-${colorName}-${sizeName}-${qty}`; // Bentuk SKU dengan format yang diinginkan

        // Tambahkan SKU ke array
        transactionData.sku.push(sku);
      });
    }

    // Tambahkan transaksi ke Firestore
    const transactionRef = $firebase.collection(
        $firebase.db,
        `/history_transaction/${uid}/transaction`
    );
    await $firebase.addDoc(transactionRef, transactionData);

    if (SharedVariables.isDevelopment) {
      console.log("Transaksi berhasil dicatat di Firestore:", transactionData);
    }
  } catch (error) {
    const errMessage = "Gagal mencatat transaksi ke Firestore: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "recordTransactionToFirestore"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred!", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Function to apply discount
const applyDiscount = async () => {
  isLoading.value = true; // Tampilkan loading selama proses berlangsung

  // Hapus spasi pada awal dan akhir discountCode
  discountCode.value = discountCode.value.trim();

  try {
    // Query ke Firestore untuk mengambil data diskon berdasarkan kode
    const discountQuery = $firebase.query(
        $firebase.collection($firebase.db, "discount"),
        $firebase.where("code", "==", discountCode.value),
        $firebase.where("discount_item", "==", "product") // Tambahkan filter baru untuk discount_item
    );
    const querySnapshot = await $firebase.getDocs(discountQuery);

    if (querySnapshot.empty) {
      discountCode.value = "";

      showMacMessage(
          "error",
          "Coupon Not Available",
          "The discount coupon is no longer available or has expired! Stay tuned for upcoming promotions.",
          true,
          ""
      );

      return;
    }

    // Ambil data diskon dari snapshot
    const discountData = querySnapshot.docs[0].data();

    // Validasi tanggal kedaluwarsa
    const currentDate = new Date();
    const expirationDate = new Date(discountData.expiration_date);

    if (currentDate > expirationDate) {
      discountCode.value = "";

      showMacMessage(
          "error",
          "Coupon Not Available",
          "The discount coupon is no longer available or has expired! Stay tuned for upcoming promotions.",
          true,
          ""
      );

      return;
    }

    // Validasi apakah diskon aktif
    if (!discountData.is_active) {
      discountCode.value = "";

      showMacMessage(
          "error",
          "Coupon Not Available",
          "The discount coupon is no longer available or has expired! Stay tuned for upcoming promotions.",
          true,
          ""
      );

      return;
    }

    // Validasi batas penggunaan diskon
    if (discountData.usage_limit > 0 && discountData.used_count >= discountData.usage_limit) {
      discountCode.value = "";

      showMacMessage(
          "error",
          "Coupon Not Available",
          "The discount coupon is no longer available or has expired! Stay tuned for upcoming promotions.",
          true,
          ""
      );

      return;
    }

    // Tambahkan validasi untuk user_restrictions_limit_for_redeem
    if (discountData.user_restrictions_limit_for_redeem > 0) {
      // Ambil user_uid dari localStorage
      const userUID = localStorage.getItem('user_uid');

      if (!userUID) {
        discountCode.value = "";

        showMacMessage("error", "SYSTEM ERROR", "A system error has occurred!", false, "route to home")
        return;
      }

      // Cek apakah user sudah menukarkan kupon sebelumnya
      const redeemedUsers = discountData.redeemed_user || [];

      // Hitung berapa kali user_uid muncul di array redeemed_user
      const userRedeemCount = redeemedUsers.filter(uid => uid === userUID).length;

      // Jika user sudah menukarkan kupon sebanyak user_restrictions_limit_for_redeem, tampilkan pesan error
      if (userRedeemCount >= discountData.user_restrictions_limit_for_redeem) {
        discountCode.value = "";

        showMacMessage(
            "error",
            "Coupon Limit Reached",
            "Sorry, you can no longer redeem this coupon code!",
            true,
            ""
        );
        return;
      }
    }

    // Tambahkan logika untuk mengecek minimum_purchase_qty_all_item
    if (discountData.minimum_purchase_qty_all_item > 0) {
      // Jika allQty kurang dari syarat minimum
      if (allQty.value < discountData.minimum_purchase_qty_all_item) {
        discountCode.value = "";

        showMacMessage(
            "error",
            "Discount Not Applied",
            `The discount coupon cannot be applied because it does not meet the requirements! (The minimum total quantity for each product must be ${discountData.minimum_purchase_qty_all_item} item(s)).`,
            true,
            ""
        );
        return;
      }
    }

    // Validasi minimum_purchase_qty_per_item
    if (discountData.minimum_purchase_qty_per_item > 0) {
      const isValid = productList.value.every(product => product.quantity >= discountData.minimum_purchase_qty_per_item);

      if (!isValid) {
        discountCode.value = "";

        showMacMessage(
            "error",
            "Discount Not Applied",
            `Each product in your cart must have a minimum quantity of ${discountData.minimum_purchase_qty_per_item}.`,
            true,
            ""
        );
        return;
      }
    }

    // New logic to handle applied_products
    if (discountData.applied_products && discountData.applied_products.length > 0) {
      productList.value.forEach(product => {
        // Cek apakah ID produk ada dalam daftar applied_products
        if (discountData.applied_products.includes(product.id_printful)) {
          // Hitung total harga produk (quantity * price)
          let productTotal = product.quantity * product.price;

          // Terapkan diskon berdasarkan discount_type
          if (discountData.discount_type === 'percentage') {
            let discountAmount = productTotal * (discountData.value / 100);
            productTotal = productTotal - discountAmount;
          } else if (discountData.discount_type === 'price') {
            productTotal = productTotal - discountData.value;
          }

          // Validasi jika productTotal < 0, set productTotal menjadi 0
          if (productTotal < 0) {
            productTotal = 0;
          }

          // Update total harga produk setelah diskon
          product.discountedTotal = productTotal;
        }
      });

      // Tidak perlu menerapkan diskon pada total keseluruhan jika produk spesifik yang didiskon
      return;
    }

    // Jika semua validasi lolos, terapkan diskon
    applyDiscountToTotal(discountData.discount_type, discountData.value); // Meneruskan tipe diskon dan nilai diskon
  } catch (error) {
    const errMessage = "Error applying discount: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "applyDiscount"
    });

    discountCode.value = "";

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home")
  } finally {
    isLoading.value = false; // Sembunyikan loading setelah proses selesai
  }
};

// Fungsi untuk mengaplikasikan diskon ke total harga
const applyDiscountToTotal = (discountType, discountValue) => {
  try {
    if (discountType === 'percentage') {
      discountAmount.value = (subtotal.value * discountValue) / 100; // Menghitung diskon berdasarkan persentase
    } else if (discountType === 'price') {
      discountAmount.value = discountValue; // Mengurangi total harga dengan nilai diskon tetap
    } else {
      throw new Error('Invalid discount type'); // Menangani kasus di mana `discountType` tidak valid
    }

    if (SharedVariables.isDevelopment) console.log("Total after discount:", total.value);
  } catch (error) {
    const errMessage = "Error applying discount to total: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "applyDiscountToTotal"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  }
};

// Function untuk menghitung biaya pengiriman menggunakan Printful API
const calculateShippingRates = async () => {
  isLoading.value = true;

  try {
    const selectedCountry = countries.value.find(countryItem => countryItem.iso2 === country.value);
    const selectedProvince = provinces.value.find(provinceItem => provinceItem.iso2 === province.value);

    // Siapkan payload untuk request shipping rates
    const payload = {
      store_id: 14395543, // Menambahkan store_id
      recipient: {
        address1: address.value,
        city: city.value,
        country_code: country.value,
        state_code: province.value,
        zip: postalCode.value,
        phone: phone.value || "", // Tambahkan phone atau gunakan placeholder
      },
      items: productList.value.map(product => ({
        variant_id: product.id_printful, // Menggunakan ID Printful dari produk
        quantity: product.quantity,
        value: typeof product.price === 'number' ? product.price.toFixed(2) : parseFloat(product.price).toFixed(2) // Konversi ke number jika bukan angka
      })),
      currency: "USD",
      locale: "en_US"
    };

    if (SharedVariables.isDevelopment) {
      console.log("Request payload untuk menghitung biaya pengiriman:", JSON.stringify(payload));
    }

    // Lakukan request ke Cloud Function untuk menghitung shipping rate
    const response = await fetch('https://us-central1-blanx-project.cloudfunctions.net/getShippingCost', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      throw new Error("Failed to calculate shipping rates.");
    }

    const shippingData = await response.json();

    if (SharedVariables.isDevelopment) {
      console.log("Shipping data received:");
      console.log(JSON.stringify(shippingData));
    }

    // Cek apakah response dari shippingData memiliki shippingRates
    if (shippingData.shippingRates && shippingData.shippingRates.length > 0) {
      // Ambil rate dari metode pengiriman pertama (misalnya, Flat Rate)
      shippingCost.value = parseFloat(shippingData.shippingRates[0].rate);

      if (SharedVariables.isDevelopment) {
        console.log("Shipping method:", shippingData.shippingRates[0].name);
        console.log("Estimated delivery:", shippingData.shippingRates[0].minDeliveryDate, "-", shippingData.shippingRates[0].maxDeliveryDate);
      }
    } else {
      console.error("No shipping rates available");
      throw new Error("No shipping rates available");
    }
  } catch (error) {
    const errMessage = "Error calculating shipping rates: " + error;

    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "calculateShippingRates"
    });

    showMacMessage("error", "Shipping Error", "Failed to calculate shipping rates. Please try again.", true, "");
  } finally {
    isLoading.value = false;
  }
};

const saveUserData = async () => {
  isLoading.value = true;

  if (!saveInfo.value) {
    showMacErrorMessage.value = true;
    macErrorMessageStatus.value = "error";
    macErrorMessageTitle.value = "Save Profile Failed!";
    macErrorMessageMessage.value = "Please fill in your profile data!";
    macErrorMessageRequiredActionButton.value = true;
    macErrorMessageAutoMessageChoice.value = "";

    return;
  }

  try {
    // Dapatkan user_uid dari localStorage
    const userUID = localStorage.getItem("user_uid");

    if (!userUID) {
      const errMessage = "User UID tidak ditemukan di localStorage";
      console.error(errMessage);
      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: "User UID not found",
        errorStackReportBySystem: new Error().stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "saveUserData"
      });
      return;
    }

    // Query ke Firestore untuk mendapatkan ID dokumen berdasarkan user_uid
    const userQuery = $firebase.query($firebase.collection($firebase.db, "user"), $firebase.where("user_uid", "==", userUID));
    const querySnapshot = await $firebase.getDocs(userQuery);

    if (querySnapshot.empty) {
      const errMessage = "User dengan user_uid tersebut tidak ditemukan";
      console.error(errMessage);
      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: "User with the provided UID not found",
        errorStackReportBySystem: new Error().stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "saveUserData"
      });
      return;
    }

    const docRef = querySnapshot.docs[0].ref;

    // Siapkan data untuk disimpan
    const userData = {
      email: email.value,
      first_name: firstName.value,
      last_name: lastName.value,
      country_id: country.value,
      province_id: province.value,
      city_id: city.value,
      postal_code: postalCode.value,
      address: address.value,
      saved_as: savedAs.value,
    };

    // Dapatkan data array existing dari field 'transaction_user'
    const docSnapshot = await $firebase.getDoc(docRef);
    const existingData = docSnapshot.data().transaction_user || [];

    // Tambahkan userData ke array existing
    existingData.push(userData);

    // Update field 'transaction_user' dengan array baru
    await $firebase.updateDoc(docRef, {transaction_user: existingData});

    if (SharedVariables.isDevelopment) {
      console.log("Data berhasil disimpan ke Firestore:", userData);
    }
  } catch (error) {
    const errMessage = "Gagal menyimpan data ke Firestore: " + error;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "saveUserData"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};


const updateUserData = async () => {
  isLoading.value = true;

  try {
    const userUID = localStorage.getItem("user_uid");

    if (!userUID) {
      const errMessage = "User UID tidak ditemukan di localStorage";
      console.error(errMessage);
      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: "User UID not found",
        errorStackReportBySystem: new Error().stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "updateUserData"
      });
      return;
    }

    const userQuery = $firebase.query($firebase.collection($firebase.db, "user"), $firebase.where("user_uid", "==", userUID));
    const querySnapshot = await $firebase.getDocs(userQuery);

    if (querySnapshot.empty) {
      const errMessage = "User dengan user_uid tersebut tidak ditemukan";
      console.error(errMessage);
      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: "User with the provided UID not found",
        errorStackReportBySystem: new Error().stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "updateUserData"
      });
      return;
    }

    const docRef = querySnapshot.docs[0].ref;

    // Data baru yang diinputkan
    const updatedData = {
      email: email.value,
      first_name: firstName.value,
      last_name: lastName.value,
      country_id: country.value,
      province_id: province.value,
      city_id: city.value,
      postal_code: postalCode.value,
      address: address.value,
      saved_as: savedAs.value,
    };

    // Dapatkan data lama dari Firestore
    const docSnapshot = await $firebase.getDoc(docRef);
    const existingData = docSnapshot.data().transaction_user || [];

    // Cari apakah ada data yang berubah
    const dataChanged = existingData.some((profile) => {
      return (
          profile.email !== updatedData.email ||
          profile.first_name !== updatedData.first_name ||
          profile.last_name !== updatedData.last_name ||
          profile.country_id !== updatedData.country_id ||
          profile.province_id !== updatedData.province_id ||
          profile.city_id !== updatedData.city_id ||
          profile.postal_code !== updatedData.postal_code ||
          profile.address !== updatedData.address ||
          profile.saved_as !== updatedData.saved_as
      );
    });

    if (dataChanged) {
      // Lakukan update pada Firestore
      const updatedProfiles = existingData.map((profile) =>
          profile.saved_as === updatedData.saved_as ? updatedData : profile
      );

      await $firebase.updateDoc(docRef, {transaction_user: updatedProfiles});

      if (SharedVariables.isDevelopment) {
        console.log("Data berhasil diperbarui di Firestore:", updatedData);
      }
    } else {
      if (SharedVariables.isDevelopment) {
        console.log("Tidak ada perubahan data. Tidak perlu update.");
      }
    }
  } catch (error) {
    const errMessage = "Gagal memperbarui data ke Firestore: " + error;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "updateUserData"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Function to handle payment
const handlePayment = async () => {
  if (!email.value || !firstName.value || !country.value ||
      !province.value || !city.value || !postalCode.value || !address.value) {

    showMacErrorMessage.value = true;
    macErrorMessageStatus.value = "error";
    macErrorMessageTitle.value = "Incomplete Form";
    macErrorMessageMessage.value = "Please fill in all required fields!";
    macErrorMessageRequiredActionButton.value = true;
    macErrorMessageAutoMessageChoice.value = "";

    showMacMessage("error", "Incomplete Form", "Please fill in all required fields!", true, "");

    const errMessage = "Incomplete form: Required fields are missing.";
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: "Incomplete form data",
      errorStackReportBySystem: new Error().stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "handlePayment"
    });

    return;
  }

  if (saveInfo.value) {
    if (!savedAs.value) {
      showMacErrorMessage.value = true;
      macErrorMessageStatus.value = "error";
      macErrorMessageTitle.value = "Incomplete Form";
      macErrorMessageMessage.value = "Please fill in all required fields!";
      macErrorMessageRequiredActionButton.value = true;
      macErrorMessageAutoMessageChoice.value = "";

      showMacMessage("error", "Incomplete Form", "Please fill in all required fields!", true, "");

      const errMessage = "Incomplete form: 'Save As' field is missing.";
      console.error(errMessage);
      SharedVariables.errorReport({
        errorReportByDev: errMessage,
        errorReportBySystem: "Incomplete form data",
        errorStackReportBySystem: new Error().stack,
        whatPlatform: "Client",
        whatPage: "pages/product-payment.vue",
        whatFunction: "handlePayment"
      });

      return;
    }
  }

  isLoading.value = true;
  try {
    if (saveInfo.value) {
      await saveUserData();
    } else if (selectedProfile.value !== "another" && !isFormReadOnly.value) {
      await updateUserData();
    }

    // Panggil function calculateShippingRates setelah menyimpan data user
    await calculateShippingRates();

    showPaymentComponent.value = true;
    showBtnPayment.value = false;
    price.value = total.value;

    if (SharedVariables.isDevelopment) console.log("isi dari price : " + price.value);
  } catch (error) {
    const errMessage = "Error handling payment: " + error.message;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "handlePayment"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Function to handle payment success
const handlePaymentSuccess = async (message, sts_transaction, payment_method, planTitle) => {

  showPaymentComponent.value = false;

  isLoading.value = true;

  try {
    await createPrintfulOrder('credit_card');

    if (discountCode.value) {
      await saveUserUIDToDiscount();
    }

    showMacMessage("success", "Order Confirmed!", "", false, "route to home");
  } catch (error) {
    const errMessage = "Error in handlePaymentSuccess: " + error.message;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "handlePaymentSuccess"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Function to handle PayPal payment success
const handlePayPalPaymentSuccess = async (message, sts_transaction, payment_method, planTitle) => {

  showPaymentComponent.value = false;

  isLoading.value = true;

  try {
    await createPrintfulOrder('paypal');

    if (discountCode.value) {
      await saveUserUIDToDiscount();
    }

    showMacMessage("success", "Order Confirmed!", "", false, "route to home");
  } catch (error) {
    const errMessage = "Error in handlePayPalPaymentSuccess: " + error.message;
    console.error(errMessage);
    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "handlePayPalPaymentSuccess"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  } finally {
    isLoading.value = false;
  }
};

// Function to handle payment error
const handlePaymentError = (message, sts_transaction, payment_method, planTitle) => {
  const errMessage = "Transaction failed: " + message;
  console.error(errMessage);

  SharedVariables.errorReport({
    errorReportByDev: errMessage,
    errorReportBySystem: message,
    errorStackReportBySystem: new Error().stack, // Mendapatkan stack trace kesalahan
    whatPlatform: "Client",
    whatPage: "pages/product-payment.vue",
    whatFunction: "handlePaymentError"
  });

  showMacMessage("error", "Transaction Failed", "Transaction failed! Please try again in a moment. If the issue persists, please contact BLANX Customer Support.", true, "");
};

// Function to close the MacErrorMessage pop-up
const closeMacErrorMessage = () => {
  showMacErrorMessage.value = false;
};

const toggleReadOnly = (field) => {
  isFormReadOnly.value = false; // Nonaktifkan mode read-only
  if (SharedVariables.isDevelopment) {
    console.log(`Field ${field} read-only mode disabled.`);
    console.log('isFormReadOnly:', isFormReadOnly.value);
  }
};

const showMacMessage = (status, title, message, requiredActionButton = true, autoMessageChoice = "") => {
  showMacErrorMessage.value = true;
  macErrorMessageStatus.value = status;
  macErrorMessageTitle.value = title;
  macErrorMessageMessage.value = message;
  macErrorMessageRequiredActionButton.value = requiredActionButton;
  macErrorMessageAutoMessageChoice.value = autoMessageChoice;
};

const saveUserUIDToDiscount = async () => {
  // Ambil user_uid dari localStorage
  const userUID = localStorage.getItem('user_uid');

  if (!userUID) {
    const errMessage = "User UID not found in localStorage.";
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: "User UID missing",
      errorStackReportBySystem: new Error().stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "saveUserUIDToDiscount"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred!", false, "route to home");
    return;
  }

  try {
    // Query ke Firestore untuk mendapatkan diskon berdasarkan kode diskon yang dimasukkan
    const discountQuery = $firebase.query(
        $firebase.collection($firebase.db, "discount"),
        $firebase.where("code", "==", discountCode.value)
    );

    const querySnapshot = await $firebase.getDocs(discountQuery);

    if (querySnapshot.empty) {
      showMacMessage(
          "error",
          "Coupon Not Available",
          "The discount coupon is no longer available or has expired! Stay tuned for upcoming promotions.",
          true,
          ""
      );
      return;
    }

    const discountDoc = querySnapshot.docs[0];
    const discountData = discountDoc.data();

    // Tambahkan user_uid ke array redeemed_user, jika belum ada
    const redeemedUsers = discountData.redeemed_user || [];
    if (!redeemedUsers.includes(userUID)) {
      redeemedUsers.push(userUID);

      // Update field 'redeemed_user' di Firestore
      await $firebase.updateDoc(discountDoc.ref, {redeemed_user: redeemedUsers});

      // Update field 'used_count', increment by 1
      const newUsedCount = discountData.used_count ? discountData.used_count + 1 : 1;
      await $firebase.updateDoc(discountDoc.ref, {used_count: newUsedCount});

      if (SharedVariables.isDevelopment) {
        console.log("User UID berhasil ditambahkan ke field 'redeemed_user':", userUID);
        console.log("used_count updated to:", newUsedCount);
      }
    } else {
      if (SharedVariables.isDevelopment) {
        console.log("User UID sudah ada di field 'redeemed_user'.");
      }
    }
  } catch (error) {
    const errMessage = "Error updating discount: " + error.message;
    console.error(errMessage);

    SharedVariables.errorReport({
      errorReportByDev: errMessage,
      errorReportBySystem: error.message,
      errorStackReportBySystem: error.stack,
      whatPlatform: "Client",
      whatPage: "pages/product-payment.vue",
      whatFunction: "saveUserUIDToDiscount"
    });

    showMacMessage("error", "SYSTEM ERROR", "A system error has occurred! Please try again in a moment. If the system is still experiencing errors, please contact BLANX Customer Support.", false, "route to home");
  }
};

// Fungsi untuk menangani emit PayProgress
const handlePayProgress = ({status}) => {
  isLoading.value = status;
  if (SharedVariables.isDevelopment) console.log("Status isLoading:", isLoading.value);
};
</script>

<style scoped>
.payment-container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
}

.payment-header-container {
  display: flex;
  flex-direction: row;
}

.page-title {
  font-size: 36px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 20px;
}

.payment-content {
  display: flex;
  justify-content: space-between;
  gap: 30px;
}

.payment-form-section,
.order-summary-section {
  background-color: #f8f8f8;
  border-radius: 10px;
  padding: 20px;
  width: 48%;
}

.form-group {
  margin-bottom: 15px;
  border-radius: 50px;
}

.form-group label {
  font-weight: bold;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 10px;
  border-radius: 50px;
  border: 1px solid #ddd;
}

.form-group textarea {
  width: 100%;
  padding: 10px;
  border-radius: 24px;
  border: 1px solid #ddd;
}

.name-section {
  display: flex;
  gap: 20px;
}

.name-section .form-group {
  flex: 1; /* Membuat lebar form-group menyesuaikan secara merata */
}

.save-info {
  display: flex;
  align-items: center;
  gap: 13px;
  margin-bottom: 15px;
  font-weight: bold;
}

.product-list {
  margin-bottom: 20px;
}

.product-item {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

.product-image {
  width: 50px;
  height: 50px;
}

.discount-section {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

.discount-input {
  flex-grow: 1;
  padding: 10px;
  border-radius: 50px;
  border: 1px solid #ddd;
}

.apply-button {
  background-color: #29abe1;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 50px;
  cursor: pointer;
  width: 130px;
}

.summary-details {
  margin-bottom: 20px;
}

.summary-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}

.total {
  font-weight: bold;
}

.pay-now-button {
  background-color: #29abe1;
  color: white;
  padding: 15px;
  border: none;
  border-radius: 50px;
  width: 100%;
  cursor: pointer;
}

.pay-now-button:hover {
  background-color: #0056b3;
}

.payment-component-container {
  margin-top: 24px;
}

.back-button {
  font-size: 18px;
  background: none;
  border: none;
  cursor: pointer;
  color: #007bff;
  margin-bottom: 20px;
}

.pop-up-message {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1001; /* Pastikan lebih tinggi dari latar belakang redup */
}

.form-group input[readonly],
.form-group select[readonly],
.form-group textarea[readonly] {
  background-color: #e0e0e0; /* Warna abu-abu */
  cursor: not-allowed;
}

.form-title-container {
  display: flex;
  flex-direction: row;
  gap: 12px;
  margin-bottom: 8px;
}

.apply-button:disabled {
  background-color: #ccc; /* Warna abu-abu untuk tombol yang dinonaktifkan */
  cursor: not-allowed; /* Menunjukkan bahwa tombol tidak dapat diklik */
}

.input-readonly {
  background-color: #e0e0e0; /* Warna abu-abu untuk menunjukkan input tidak bisa diisi */
  cursor: not-allowed; /* Mengubah cursor menjadi 'not-allowed' */
}
</style>
